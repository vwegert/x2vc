package org.x2vc.process.tasks;

import java.io.File;
import java.util.UUID;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.x2vc.analysis.IDocumentAnalyzer;
import org.x2vc.processor.IHTMLDocumentContainer;
import org.x2vc.processor.IXSLTProcessor;
import org.x2vc.report.IVulnerabilityCandidate;
import org.x2vc.report.IVulnerabilityCandidateCollector;
import org.x2vc.schema.ISchemaManager;
import org.x2vc.schema.structure.IXMLSchema;
import org.x2vc.stylesheet.IStylesheetInformation;
import org.x2vc.stylesheet.IStylesheetManager;
import org.x2vc.utilities.IDebugObjectWriter;
import org.x2vc.xml.document.IDocumentGenerator;
import org.x2vc.xml.document.IDocumentModifier;
import org.x2vc.xml.document.IXMLDocumentContainer;
import org.x2vc.xml.request.ICompletedRequestRegistry;
import org.x2vc.xml.request.IDocumentRequest;
import org.x2vc.xml.request.IRequestGenerator;

import com.google.inject.Inject;
import com.google.inject.assistedinject.Assisted;

/**
 * This task is used to process a single {@link IDocumentRequest} and follow up on the results depending on the
 * {@link ProcessingMode}.
 */
public class InitialVulnerabilityCheckTask implements IInitialVulnerabilityCheckTask {

	private static final Logger logger = LogManager.getLogger();

	private IStylesheetManager stylesheetManager;
	private ISchemaManager schemaManager;
	private IDocumentGenerator documentGenerator;
	private IXSLTProcessor processor;
	private IDocumentAnalyzer analyzer;
	private IRequestGenerator requestGenerator;
	private ICompletedRequestRegistry completedRequestRegistry;
	private IDebugObjectWriter debugObjectWriter;
	private IVulnerabilityCandidateCollector vulnerabilityCandidateCollector;
	private File xsltFile;
	private Consumer<IDocumentRequest> requestCollector;
	private BiConsumer<UUID, Boolean> callback;

	private UUID taskID = UUID.randomUUID();

	int nextCandidateNumber = 1;

	private IDocumentRequest request;

	@SuppressWarnings("java:S107") // large number of parameters due to dependency injection
	@Inject
	InitialVulnerabilityCheckTask(IStylesheetManager stylesheetManager, ISchemaManager schemaManager,
			IDocumentGenerator documentGenerator, IXSLTProcessor processor, IDocumentAnalyzer analyzer,
			IRequestGenerator requestGenerator, ICompletedRequestRegistry completedRequestRegistry,
			IDebugObjectWriter debugObjectWriter, IVulnerabilityCandidateCollector vulnerabilityCandidateCollector,
			@Assisted File xsltFile,
			@Assisted Consumer<IDocumentRequest> requestCollector,
			@Assisted BiConsumer<UUID, Boolean> callback) {
		super();
		this.stylesheetManager = stylesheetManager;
		this.schemaManager = schemaManager;
		this.documentGenerator = documentGenerator;
		this.processor = processor;
		this.analyzer = analyzer;
		this.requestGenerator = requestGenerator;
		this.completedRequestRegistry = completedRequestRegistry;
		this.debugObjectWriter = debugObjectWriter;
		this.vulnerabilityCandidateCollector = vulnerabilityCandidateCollector;
		this.xsltFile = xsltFile;
		this.requestCollector = requestCollector;
		this.callback = callback;
	}

	@Override
	public void run() {
		logger.traceEntry("for task ID {}", this.taskID);
		try {
			final IStylesheetInformation stylesheetInfo = this.stylesheetManager.get(this.xsltFile.toURI());
			final IXMLSchema schema = this.schemaManager.getSchema(stylesheetInfo.getURI());

			logger.debug("generating new request to explore schema usage of stylesheet {}", stylesheetInfo.getURI());
			this.request = this.requestGenerator.generateNewRequest(schema);
			this.debugObjectWriter.writeRequest(this.taskID, this.request);

			if (this.completedRequestRegistry.contains(this.request)) {
				logger.debug("eliminating duplicate request");
			} else {
				this.debugObjectWriter.writeRequest(this.taskID, this.request);

				logger.debug("registering request as completed");
				this.completedRequestRegistry.register(this.request);

				logger.debug("generating XML document");
				final IXMLDocumentContainer xmlDocument = this.documentGenerator.generateDocument(this.request);
				this.debugObjectWriter.writeXMLDocument(this.taskID, xmlDocument);

				logger.debug("processing XML to HTML");
				final IHTMLDocumentContainer htmlDocument = this.processor.processDocument(xmlDocument);
				this.debugObjectWriter.writeHTMLDocument(this.taskID, htmlDocument);

				if (!htmlDocument.isFailed()) {
					this.analyzer.analyzeDocument(this.taskID, htmlDocument,
							this::handleDocumentModificationRequest, this::handleVulnerabilityCandidate);
				}
			}
			this.callback.accept(this.taskID, true);
		} catch (final Exception ex) {
			logger.error("unhandled exception in request processing task", ex);
			this.callback.accept(this.taskID, false);
		}
		logger.traceExit();
	}

	private void handleDocumentModificationRequest(IDocumentModifier modifier) {
		logger.traceEntry();
		logger.debug("adding new task for modification request");
		this.requestCollector.accept(this.requestGenerator.modifyRequest(this.request, modifier));
		logger.traceExit();
	}

	private void handleVulnerabilityCandidate(IVulnerabilityCandidate candidate) {
		logger.traceEntry();
		this.debugObjectWriter.writeVulnerabilityCandidate(this.taskID, this.nextCandidateNumber, candidate);
		this.nextCandidateNumber++;
		logger.debug("storing vulnerability candidate for later processing");
		this.vulnerabilityCandidateCollector.add(this.request.getStylesheeURI(), candidate);
		logger.traceExit();
	}

	@Override
	public UUID getTaskID() {
		return this.taskID;
	}

}
