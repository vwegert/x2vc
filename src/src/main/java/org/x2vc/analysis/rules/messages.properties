AnalyzerRule.A_1.Default.Heading = A.1 - Attribute Injection
AnalyzerRule.A_1.Default.PlaceholderIntroduction = No possibility was identified to introduce additional attributes \
                                                   by manipulating the input data.
AnalyzerRule.A_1.Default.Introduction = This rule identifies errors in the XSLT program that allow an attacker to \
                                        introduce attributes into the HTML output by manipulating the input. This may \
                                        cause unwanted JavaScript commands to be executed or other malfunctions to occur.
AnalyzerRule.A_1.Default.Description = When using XSLT, there are two ways to add entire attributes to the HTML output: \
                                       by using literal result elements or <code>xsl:attribute</code> directives. \
                                       Using the <code>xsl:attribute</code> directive provides the XSLT developer with \
                                       considerable flexibility when generating the output document since by using it, \
                                       existing literal result element attributes can be overwritten and new attributes \
                                       can be added. Both the attribute name and its value can be derived dynamically. \
                                       Depending on the exact formulation of the statement, it might be possible for an \
                                       attacker to manipulate the input data in a way that leads to additional malicious \
                                       attributes in the HTML output. For this reason, <code>xsl:attribute</code> directives \
                                       with a dynamic attribute name need to be checked for possible XSS vulnerabilities.
AnalyzerRule.A_1.Default.Countermeasures = If possible, convert the dynamic attribute name into a selection of fixed attributes, \
                                           e.g. using a <code>xsl:choose</code> expression to evaluate the input data. If that \
                                           is not practical, introduce additional checks to limit the attribute names to a \
                                           whitelist of non-critical attribute names.

AnalyzerRule.E_1.Default.Heading = E.1 - Element Injection
AnalyzerRule.E_1.Default.PlaceholderIntroduction = No possibility was identified to introduce additional elements \
                                                   by manipulating the input data.
AnalyzerRule.E_1.Default.Introduction = This rule identifies errors in the XSLT program that allow an attacker to \
                                        introduce elements into the HTML output by manipulating the input. This may \
                                        cause unwanted JavaScript commands to be executed or other malfunctions to occur.
AnalyzerRule.E_1.Default.Description = When using XSLT, there are a number of ways to add entire elements to the HTML output: \
                                       by using literal result elements, <code>xsl:element</code> directives, copying parts \
                                       of the input document or disabling output escaping. \
                                       Using the <code>xsl:element</code> directive provides the XSLT developer with \
                                       considerable flexibility when generating the output document since the element name \
                                       can be derived dynamically. \
                                       Depending on the exact formulation of the statement, it might be possible for an \
                                       attacker to manipulate the input data in a way that leads to malicious \
                                       elements in the HTML output. For this reason, <code>xsl:element</code> directives \
                                       with a dynamic element name need to be checked for possible XSS vulnerabilities.
AnalyzerRule.E_1.Default.Countermeasures = If possible, convert the dynamic element name into a selection of fixed elements, \
                                           e.g. using a <code>xsl:choose</code> expression to evaluate the input data. If that \
                                           is not practical, introduce additional checks to limit the element names to a \
                                           whitelist of non-critical element names.
