package org.x2vc.report;

import java.util.Objects;
import java.util.UUID;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

/**
 * Standard implementation of {@link IVulnerabilityCandidate}.
 */
@XmlRootElement(name = "vulnerabilityCandidate")
public class VulnerabilityCandidate implements IVulnerabilityCandidate {

	private static final long serialVersionUID = -5422837599186191302L;

	@XmlAttribute
	private String analyzerRuleID;

	@XmlAttribute
	private UUID affectingSchemaObject;

	@XmlAttribute
	private String affectedOutputElement;

	@XmlElement(name = "inputSample")
	private String inputSample;

	@XmlElement(name = "outputSample")
	private String outputSample;

	@XmlTransient
	private UUID taskID;

	/**
	 * Creates a new vulnerability candidate
	 *
	 * @param analyzerRuleID
	 * @param taskID
	 * @param affectingSchemaObject
	 * @param affectedOutputElement
	 * @param inputSample
	 * @param outputSample
	 */
	public VulnerabilityCandidate(String analyzerRuleID, UUID taskID, UUID affectingSchemaObject,
			String affectedOutputElement, String inputSample, String outputSample) {
		super();
		this.analyzerRuleID = analyzerRuleID;
		this.taskID = taskID;
		this.affectingSchemaObject = affectingSchemaObject;
		this.affectedOutputElement = affectedOutputElement;
		this.inputSample = inputSample;
		this.outputSample = outputSample;
	}

	VulnerabilityCandidate() {
		// only required for marshalling/unmarshalling
	}

	@Override
	public String getAnalyzerRuleID() {
		return this.analyzerRuleID;
	}

	@Override
	public UUID getAffectingSchemaObject() {
		return this.affectingSchemaObject;
	}

	@Override
	public String getAffectedOutputElement() {
		return this.affectedOutputElement;
	}

	@Override
	public String getInputSample() {
		return this.inputSample;
	}

	@Override
	public String getOutputSample() {
		return this.outputSample;
	}

	@Override
	public UUID getTaskID() {
		return this.taskID;
	}

	@Override
	public int hashCode() {
		return Objects.hash(this.affectedOutputElement, this.affectingSchemaObject, this.analyzerRuleID,
				this.inputSample, this.outputSample, this.taskID);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final VulnerabilityCandidate other = (VulnerabilityCandidate) obj;
		return Objects.equals(this.affectedOutputElement, other.affectedOutputElement)
				&& Objects.equals(this.affectingSchemaObject, other.affectingSchemaObject)
				&& Objects.equals(this.analyzerRuleID, other.analyzerRuleID)
				&& Objects.equals(this.inputSample, other.inputSample)
				&& Objects.equals(this.outputSample, other.outputSample) && Objects.equals(this.taskID, other.taskID);
	}

}
