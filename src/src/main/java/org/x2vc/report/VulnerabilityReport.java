package org.x2vc.report;

import java.net.URI;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Objects;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.x2vc.utilities.jaxb.LocalDateTimeAdapter;

import com.google.common.base.Supplier;
import com.google.common.base.Suppliers;
import com.google.common.collect.ImmutableCollection;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;

/**
 * Standard implementation of {@link IVulnerabilityReport}.
 */
@XmlRootElement(name = "vulnerabilityReport")
public final class VulnerabilityReport implements IVulnerabilityReport {

	private final URI stylesheetURI;
	private final LocalDateTime checkDate;
	private final ImmutableList<IVulnerabilityReportSection> sections;
	private final ImmutableCollection<IProcessingMessage> messages;

	private VulnerabilityReport(Builder builder) {
		this.stylesheetURI = builder.stylesheetURI;
		this.checkDate = builder.checkDate;
		this.sections = ImmutableList.copyOf(builder.sections);
		this.messages = ImmutableList.copyOf(builder.messages);
	}

	@SuppressWarnings("java:S4738") // type required here
	private VulnerabilityReport() {
		// default constructor to make JAXB happy
		this.stylesheetURI = null;
		this.checkDate = null;
		this.sections = ImmutableList.of();
		this.messages = ImmutableList.of();
	}

	@Override
	@XmlAttribute(name = "stylesheetURI")
	public URI getStylesheetURI() {
		return this.stylesheetURI;
	}

	@Override
	@XmlAttribute(name = "stylesheetFilename")
	public String getStylesheetFilename() {
		return Paths.get(this.stylesheetURI).getFileName().toString();
	}

	@Override
	@XmlAttribute(name = "checkDate")
	@XmlJavaTypeAdapter(LocalDateTimeAdapter.class)
	public LocalDateTime getCheckDate() {
		return this.checkDate;
	}

	@SuppressWarnings("java:S4738") // Java supplier does not support memoization
	private transient Supplier<Integer> issueNumberSupplier = Suppliers
		.memoize(() -> this.getSections().stream().mapToInt(s -> s.getIssues().size()).sum());

	@Override
	@XmlAttribute(name = "totalIssues")
	public Integer getTotalNumberOfIssues() {
		return this.issueNumberSupplier.get();
	}

	@Override
	@XmlElementWrapper(name = "messages")
	@XmlElement(name = "message", type = ProcessingMessage.class)
	public ImmutableCollection<IProcessingMessage> getMessages() {
		return this.messages;
	}

	@Override
	@XmlElementWrapper(name = "sections")
	@XmlElement(name = "section", type = VulnerabilityReportSection.class)
	public ImmutableList<IVulnerabilityReportSection> getSections() {
		return this.sections;
	}

	@Override
	public int hashCode() {
		return Objects.hash(this.checkDate, this.messages, this.sections, this.stylesheetURI);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!(obj instanceof VulnerabilityReport)) {
			return false;
		}
		final VulnerabilityReport other = (VulnerabilityReport) obj;
		return Objects.equals(this.checkDate, other.checkDate) && Objects.equals(this.messages, other.messages)
				&& Objects.equals(this.sections, other.sections)
				&& Objects.equals(this.stylesheetURI, other.stylesheetURI);
	}

	/**
	 * Provides a builder to create a report instance.
	 *
	 * @param stylesheetURI
	 * @return a new builder
	 */
	public static Builder builder(URI stylesheetURI) {
		return new Builder(stylesheetURI);
	}

	/**
	 * Builder to build {@link VulnerabilityReport}.
	 */
	public static final class Builder {
		private URI stylesheetURI;
		private LocalDateTime checkDate = LocalDateTime.now();
		private List<IVulnerabilityReportSection> sections = Lists.newArrayList();
		private List<IProcessingMessage> messages = Lists.newArrayList();

		private Builder(URI stylesheetURI) {
			this.stylesheetURI = stylesheetURI;
		}

		/**
		 * Builder method for checkDate parameter.
		 *
		 * @param checkDate field to set
		 * @return builder
		 */
		public Builder withCheckDate(LocalDateTime checkDate) {
			this.checkDate = checkDate;
			return this;
		}

		/**
		 * Builder method for messages parameter.
		 *
		 * @param message field to set
		 * @return builder
		 */
		public Builder addMessage(IProcessingMessage message) {
			this.messages.add(message);
			return this;
		}

		/**
		 * Builder method for messages parameter.
		 *
		 * @param messages field to set
		 * @return builder
		 */
		public Builder addMessages(Collection<IProcessingMessage> messages) {
			this.messages.addAll(messages);
			return this;
		}

		/**
		 * Builder method for sections parameter.
		 *
		 * @param section field to set
		 * @return builder
		 */
		public Builder addSection(IVulnerabilityReportSection section) {
			this.sections.add(section);
			return this;
		}

		/**
		 * Builder method for sections parameter.
		 *
		 * @param sections field to set
		 * @return builder
		 */
		public Builder addSections(Collection<IVulnerabilityReportSection> sections) {
			this.sections.addAll(sections);
			return this;
		}

		/**
		 * Builder method of the builder.
		 *
		 * @return built class
		 */
		public VulnerabilityReport build() {
			return new VulnerabilityReport(this);
		}
	}

}
